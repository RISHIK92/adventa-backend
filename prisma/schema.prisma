// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  email         String?     @unique
  password      String?
  fullName      String?
  primaryExamId Int?
  personaTag    PersonaTag? // Enum for initial experience tailoring

  overallAverageAccuracy Decimal?   @default(0.00) @db.Decimal(5, 2) 

  createdAt DateTime @default(now())

  primaryExam Exam? @relation(fields: [primaryExamId], references: [id])

  // Performance Summaries
  subtopicPerformance UserSubtopicPerformance[]
  examSummaries       UserExamOverallSummary[]
  testInstances       UserTestInstanceSummary[]
  UserTestAnswer      UserTestAnswer[]

  UserTopicPerformance UserTopicPerformance[]
}

model Exam {
  id   Int    @id @default(autoincrement())
  name String @unique // e.g., 'JEE Main & Advanced', 'NEET UG'

  durationInMinutes         Int     // e.g., 180
  totalQuestions            Int     // e.g., 90
  
  marksPerCorrect           Int     @default(4)
  // Store as a positive integer. The application logic will subtract it.
  negativeMarksPerIncorrect Int     @default(1)
  marksPerUnattempted       Int     @default(0)

  examSessions ExamSession[]
  testInstances UserTestInstanceSummary[] 
  subjects      Subject[]
  users         User[]
  examSummaries UserExamOverallSummary[]
}

model ExamSession {
  id     Int    @id @default(autoincrement())
  examId Int
  name   String // e.g., "2024 - 27th Jan Shift 1", "2023 Phase 2", "2022"

  // This is the date the exam took place
  sessionDate DateTime?

  // --- Relationships ---
  exam      Exam       @relation(fields: [examId], references: [id])
  questions Question[] // An exam session has many questions

  // An exam must have a unique session name
  @@unique([examId, name])
}

model Subject {
  id     Int    @id @default(autoincrement())
  examId Int
  name   String // e.g., 'Physics', 'Chemistry'

  exam   Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  topics Topic[]

  @@unique([examId, name])
}

model Topic {
  id        Int    @id @default(autoincrement())
  subjectId Int
  name      String // e.g., 'Rotational Motion', 'Organic Chemistry'

  averageAccuracyPercent Decimal?  @default(0.00) @db.Decimal(5, 2)

  // --- Relationships ---
  userPerformance     UserTopicPerformance[]
  subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subtopics Subtopic[]

  @@unique([subjectId, name])
  TestTopicSnapshot TestTopicSnapshot[]
}

model Subtopic {
  id      Int    @id @default(autoincrement())
  topicId Int
  name    String // e.g., 'Moment of Inertia'

  averageAccuracyPercent Decimal  @default(0.00) @db.Decimal(5, 2)

  topic           Topic                     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions       Question[] // A subtopic has many questions
  userPerformance UserSubtopicPerformance[]

  @@unique([topicId, name])
  testSubtopicSnapshots TestSubtopicSnapshot[]
}

model Question {
  id         Int @id @default(autoincrement())
  subtopicId Int
  examSessionId Int?

  question      String
  shortcut      String?
  equations     String? // e.g., "F = ma", "E = mc^2"
  imageUrl      String? // URL to an image, if applicable
  imagesolurl   String? // URL to an image solution, if applicable
  options       Json? // e.g., {"A": "...", "B": "..."}
  correctOption String
  solution      String

  // Metadata & ML Features
  humanDifficultyLevel DifficultyLevel // Enum for human assessment
  questionType         String[] // Array of strings for types
  wordCountQuestion    Int?
  wordCountSolution    Int?
  averageTimeSec       Int? // Average time taken to solve this question
  Report               Boolean?
  ReportReason         String?

  // ML-Generated Fields (start as null)
  predictedDifficultyScore Float?
  platformAvgTimeSec       Int?

  examSession    ExamSession?     @relation(fields: [examSessionId], references: [id])
  subtopic       Subtopic         @relation(fields: [subtopicId], references: [id])
  UserTestAnswer UserTestAnswer[]
  testInstances TestInstanceQuestion[]
}

model TestInstanceQuestion {
  id             String @id @default(cuid())
  testInstanceId String
  questionId     Int
  order          Int // To maintain the question order

  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id])
  question     Question              @relation(fields: [questionId], references: [id])

  @@unique([testInstanceId, questionId])
  @@index([testInstanceId])
}

model UserTopicPerformance {
  userId  String
  topicId Int

  // Performance Metrics (aggregated from subtopics)
  totalAttempted    Int @default(0)
  totalCorrect      Int @default(0)
  totalIncorrect    Int @default(0)
  totalTimeTakenSec Int @default(0)

  // Derived Fields for fast queries
  accuracyPercent       Decimal @default(0.00) @db.Decimal(5, 2)
  avgTimePerQuestionSec Decimal @default(0.00) @db.Decimal(10, 2)

  lastUpdatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  difficultyPerformances UserTopicDifficultyPerformance[]

  @@id([userId, topicId])
  @@index([userId, accuracyPercent])
}

model UserTopicDifficultyPerformance {
  userId          String
  topicId         Int
  difficultyLevel DifficultyLevel

  // Core performance metrics for this specific difficulty
  totalAttempted    Int @default(0)
  totalCorrect      Int @default(0)
  totalTimeTakenSec Int @default(0)

  // Derived fields for fast queries at the difficulty level
  accuracyPercent       Decimal @default(0.00) @db.Decimal(5, 2)
  avgTimePerQuestionSec Decimal @default(0.00) @db.Decimal(10, 2)

  lastUpdatedAt DateTime @updatedAt

  topicPerformance UserTopicPerformance @relation(fields: [userId, topicId], references: [userId, topicId], onDelete: Cascade)

  @@id([userId, topicId, difficultyLevel])
}

model UserSubtopicPerformance {
  userId     String
  subtopicId Int

  // Performance Metrics
  totalAttempted    Int @default(0)
  totalCorrect      Int @default(0)
  totalIncorrect    Int @default(0)
  totalTimeTakenSec Int @default(0)

  // Derived Fields for fast queries
  accuracyPercent       Decimal @default(0.00) @db.Decimal(5, 2)
  avgTimePerQuestionSec Decimal @default(0.00) @db.Decimal(10, 2)

  // Timestamps
  lastUpdatedAt DateTime @updatedAt

  // --- Relationships & Indexes ---
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtopic Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)

  @@id([userId, subtopicId]) // Composite Primary Key
  @@index([userId, accuracyPercent]) // For fast lookups of a user's weakest topics
}

model TestTopicSnapshot {
  id                String   @id @default(uuid())
  testInstanceId    String
  topicId           Int
  
  // The user's performance METRICS AT THE MOMENT OF TEST CREATION
  accuracyPercentBefore Decimal @db.Decimal(5, 2)
  totalAttemptedBefore  Int
  
  // --- Relationships ---
  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id], onDelete: Cascade)
  topic        Topic                   @relation(fields: [topicId], references: [id])
  
  @@unique([testInstanceId, topicId])
}

model TestSubtopicSnapshot {
  id                String   @id @default(uuid())
  testInstanceId    String
  subtopicId        Int
  
  // The user's performance METRICS AT THE MOMENT OF TEST CREATION
  accuracyPercentBefore Decimal @db.Decimal(5, 2)
  totalAttemptedBefore  Int
  
  // --- Relationships ---
  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id], onDelete: Cascade)
  subtopic     Subtopic                @relation(fields: [subtopicId], references: [id])
  
  @@unique([testInstanceId, subtopicId]) // Ensure one snapshot per subtopic per test
}


model UserExamOverallSummary {
  userId String
  examId Int

  // Overall Performance
  totalQuestionsAttempted Int     @default(0)
  totalCorrect            Int     @default(0)
  totalIncorrect          Int     @default(0)
  overallAccuracyPercent  Decimal @default(0.00) @db.Decimal(5, 2)

  // Engagement Metrics
  totalMockTestsCompleted Int @default(0)

  lastUpdatedAt DateTime @updatedAt

  // --- Relationships ---
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@id([userId, examId]) // Composite Primary Key
}

// Stores the result of every single test a user takes.
model UserTestInstanceSummary {
  id       String   @id @default(uuid())
  userId   String
  examId   Int
  testName String?
  testType TestType

  // Overall test performance
  score          Int
  totalMarks     Int
  percentile     Decimal? @db.Decimal(5, 2)
  totalQuestions Int
  numCorrect     Int
  numIncorrect   Int
  numUnattempted Int
  timeTakenSec   Int

  completedAt        DateTime?
  
  exam Exam @relation(fields: [examId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  answers UserTestAnswer[]
  testQuestions TestInstanceQuestion[]

  @@index([userId, completedAt(sort: Desc)])
  topicSnapshots      TestTopicSnapshot[]
  subtopicSnapshots TestSubtopicSnapshot[]
}

model UserTestAnswer {
  id             String @id @default(uuid())
  testInstanceId String
  questionId     Int
  userId         String

  userAnswer   String?
  isCorrect    Boolean
  status       AnswerStatus
  timeTakenSec Int

  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id], onDelete: Cascade)
  question     Question                @relation(fields: [questionId], references: [id])
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testInstanceId, questionId])
  @@index([testInstanceId])
}

enum AnswerStatus {
  Correct
  Incorrect
  Unattempted
}

enum PersonaTag {
  beginner
  striker
  topper
}

enum DifficultyLevel {
  Easy
  Medium
  Hard
  Elite
}

enum TestType {
  mock
  quiz
  drill
  diagnostic
  group
  custom
  weakness
  pyq
}
