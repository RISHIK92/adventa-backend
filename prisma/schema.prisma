// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                    @id
  email                  String?                   @unique
  password               String?
  fullName               String?
  primaryExamId          Int?
  personaTag             PersonaTag?

  score                  Decimal?                  @default(0.0) @db.Decimal(10, 2)
  overallAverageAccuracy Decimal?                  @default(0.00) @db.Decimal(5, 2)
  createdAt              DateTime                  @default(now())
  streak                 Int?                      @default(0)

  primaryExam                Exam?                       @relation(fields: [primaryExamId], references: [id])
  subtopicPerformance        UserSubtopicPerformance[]
  examSummaries              UserExamOverallSummary[]
  dailySnapshots             UserDailyPerformanceSnapshot[]
  testInstances              UserTestInstanceSummary[]
  UserTestAnswer             UserTestAnswer[]
  UserTopicPerformance       UserTopicPerformance[]
  studyRooms                 StudyRoomMember[]
  createdStudyRooms          StudyRoom[]                 @relation("StudyRoomAdmins")
  sentInvitations            StudyRoomInvitation[]       @relation("Inviter")
  receivedInvitations        StudyRoomInvitation[]       @relation("Invitee")
  reviews                    StudyRoomReview[]
  sentChallenges             Challenge[]                 @relation("Challenger")
  receivedChallenges         Challenge[]                 @relation("Challenged")
  wonChallenges              Challenge[]                 @relation("Winner")
  discussionThreads          DiscussionThread[]
  discussionReplies          DiscussionReply[]
  discussionLikes            DiscussionLike[]
  badges                     UserBadge[]
  ChallengeParticipant       ChallengeParticipant[]
  UserSubjectPerformance     UserSubjectPerformance[]
  createdScheduledGroupTests ScheduledGroupTest[]
  StudyRoom                  StudyRoom[]                 @relation("StudyRoomCreator")
  memberStats                UserGroupStats[]
  challengeAnswers ChallengeAnswer[]
  dailyRecommendations DailyRecommendation[]
  scheduleProfiles       UserScheduleProfile[]
  scheduledSessions      ScheduledSession[]
}

model Exam {
  id                        Int                       @id @default(autoincrement())
  name                      String                    @unique
  durationInMinutes         Int
  totalQuestions            Int
  marksPerCorrect           Int                       @default(4)
  negativeMarksPerIncorrect Int                       @default(1)
  marksPerUnattempted       Int                       @default(0)

  studyRooms    StudyRoomExam[]
  examSessions  ExamSession[]
  testInstances UserTestInstanceSummary[]
  subjects      Subject[]
  users         User[]
  examSummaries UserExamOverallSummary[]
  StudyRoom     StudyRoom[]
  dailyRecommendations DailyRecommendation[]
  scheduleProfiles        UserScheduleProfile[]
}

model ExamSession {
  id                     Int                 @id @default(autoincrement())
  examId                 Int
  name                   String
  sessionDate            DateTime?
  scorePercentileMapping Json?

  exam           Exam                @relation(fields: [examId], references: [id])
  questions      Question[]
  generatedPaper GeneratedPyqPaper?
  testInstances  UserTestInstanceSummary[]

  @@unique([examId, name])
  @@index([examId])
}

model GeneratedPyqPaper {
  id            Int         @id @default(autoincrement())
  examSessionId Int         @unique
  questionOrder Json

  examSession ExamSession @relation(fields: [examSessionId], references: [id])
}

model Subject {
  id                     Int                         @id @default(autoincrement())
  examId                 Int
  name                   String
  averageAccuracyPercent Decimal?                    @db.Decimal(5, 2)

  exam                Exam                        @relation(fields: [examId], references: [id], onDelete: Cascade)
  topics              Topic[]
  studyRooms          StudyRoomSubject[]
  UserSubjectPerformance UserSubjectPerformance[]
  scheduledGroupTests ScheduledGroupTestSubject[]

  @@unique([examId, name])
}

model Topic {
  id                     Int                      @id @default(autoincrement())
  subjectId              Int
  name                   String
  averageAccuracyPercent Decimal?                 @default(0.00) @db.Decimal(5, 2)

  examWeightage          Decimal?                 @default(0.0) @db.Decimal(5, 2) // e.g., 8.50 for 8.5%
  studyMaterialLink      String?

  userPerformance   UserTopicPerformance[]
  subject           Subject                  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subtopics         Subtopic[]
  TestTopicSnapshot TestTopicSnapshot[]
  challenges        Challenge[]
  scheduledSessions ScheduledSession[]

  @@unique([subjectId, name])
  @@index([subjectId])
}

model Subtopic {
  id                     Int                       @id @default(autoincrement())
  topicId                Int
  name                   String
  averageAccuracyPercent Decimal                   @default(0.00) @db.Decimal(5, 2)

  topic                 Topic                     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions             Question[]
  userPerformance       UserSubtopicPerformance[]
  testSubtopicSnapshots TestSubtopicSnapshot[]

  @@unique([topicId, name])
  @@index([topicId])
}

model Question {
  id                       Int                    @id @default(autoincrement())
  subtopicId               Int
  examSessionId            Int?
  question                 String
  shortcut                 String?
  equations                String?
  imageUrl                 String?
  imagesolurl              String?
  options                  Json?
  correctOption            String
  solution                 String
  humanDifficultyLevel     DifficultyLevel
  questionType             String[]
  wordCountQuestion        Int?
  wordCountSolution        Int?
  averageTimeSec           Int?
  Report                   Boolean?
  ReportReason             String?
  predictedDifficultyScore Float?
  platformAvgTimeSec       Int?

  embedding                Unsupported("vector(1024)")? 

  examSession       ExamSession?           @relation(fields: [examSessionId], references: [id])
  subtopic          Subtopic               @relation(fields: [subtopicId], references: [id])
  UserTestAnswer    UserTestAnswer[]
  testInstances     TestInstanceQuestion[]
  discussionThreads DiscussionThread[]
  challengeAnswers  ChallengeAnswer[]

  @@index([examSessionId])
}

model TestInstanceQuestion {
  id             String                @id @default(cuid())
  testInstanceId String
  questionId     Int
  order          Int

  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id])
  question     Question                @relation(fields: [questionId], references: [id])

  @@unique([testInstanceId, questionId])
  @@index([testInstanceId])
}

model UserSubjectPerformance {
  userId                String
  subjectId             Int
  totalAttempted        Int     @default(0)
  totalCorrect          Int     @default(0)
  totalIncorrect        Int     @default(0)
  totalTimeTakenSec     Int     @default(0)
  accuracyPercent       Decimal @default(0.00) @db.Decimal(5, 2)
  avgTimePerQuestionSec Decimal @default(0.00) @db.Decimal(10, 2)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([userId, subjectId])
}

model UserTopicPerformance {
  userId                String
  topicId               Int
  totalAttempted        Int      @default(0)
  totalCorrect          Int      @default(0)
  totalIncorrect        Int      @default(0)
  totalTimeTakenSec     Int      @default(0)
  accuracyPercent       Decimal  @default(0.00) @db.Decimal(5, 2)
  avgTimePerQuestionSec Decimal  @default(0.00) @db.Decimal(10, 2)
  lastUpdatedAt         DateTime @updatedAt

  user                   User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic                  Topic                          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  difficultyPerformances UserTopicDifficultyPerformance[]

  @@id([userId, topicId])
  @@index([userId, accuracyPercent])
}

model UserTopicDifficultyPerformance {
  userId                String
  topicId               Int
  difficultyLevel       DifficultyLevel
  totalAttempted        Int             @default(0)
  totalCorrect          Int             @default(0)
  totalTimeTakenSec     Int             @default(0)
  accuracyPercent       Decimal         @default(0.00) @db.Decimal(5, 2)
  avgTimePerQuestionSec Decimal         @default(0.00) @db.Decimal(10, 2)
  lastUpdatedAt         DateTime        @updatedAt

  topicPerformance UserTopicPerformance @relation(fields: [userId, topicId], references: [userId, topicId], onDelete: Cascade)

  @@id([userId, topicId, difficultyLevel])
}

model UserSubtopicPerformance {
  userId                String
  subtopicId            Int
  totalAttempted        Int      @default(0)
  totalCorrect          Int      @default(0)
  totalIncorrect        Int      @default(0)
  totalTimeTakenSec     Int      @default(0)
  accuracyPercent       Decimal  @default(0.00) @db.Decimal(5, 2)
  avgTimePerQuestionSec Decimal  @default(0.00) @db.Decimal(10, 2)
  lastUpdatedAt         DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtopic Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)

  @@id([userId, subtopicId])
  @@index([userId, accuracyPercent])
  @@index([userId, subtopicId])
}

model TestTopicSnapshot {
  id                    String                @id @default(uuid())
  testInstanceId        String
  topicId               Int
  accuracyPercentBefore Decimal               @db.Decimal(5, 2)
  totalAttemptedBefore  Int

  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id], onDelete: Cascade)
  topic        Topic                   @relation(fields: [topicId], references: [id])

  @@unique([testInstanceId, topicId])
}

model TestSubtopicSnapshot {
  id                    String                @id @default(uuid())
  testInstanceId        String
  subtopicId            Int
  accuracyPercentBefore Decimal               @db.Decimal(5, 2)
  totalAttemptedBefore  Int

  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id], onDelete: Cascade)
  subtopic     Subtopic                @relation(fields: [subtopicId], references: [id])

  @@unique([testInstanceId, subtopicId])
}

model UserExamOverallSummary {
  userId                  String
  examId                  Int
  totalQuestionsAttempted Int      @default(0)
  totalCorrect            Int      @default(0)
  totalIncorrect          Int      @default(0)
  overallAccuracyPercent  Decimal  @default(0.00) @db.Decimal(5, 2)
  totalMockTestsCompleted Int      @default(0)
  lastUpdatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@id([userId, examId])
}

model UserDailyPerformanceSnapshot {
  id                  String   @id @default(uuid())
  userId              String
  date                DateTime @db.Date
  accuracyPercent     Decimal  @db.Decimal(5, 2)
  questionsAttempted  Int
  timeSpentSec        Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, date])
}

model UserTestInstanceSummary {
  id             String    @id @default(uuid())
  userId         String
  examId         Int?
  testName       String?
  testType       TestType
  score          Int
  totalMarks     Int
  percentile     Decimal?  @db.Decimal(5, 2)
  totalQuestions Int
  numCorrect     Int
  numIncorrect   Int
  numUnattempted Int
  timeTakenSec   Int
  examSessionId  Int?
  completedAt    DateTime?

  scheduledGroupTestId String?

  generatedQuestionIds   Json?

  exam             Exam?                       @relation(fields: [examId], references: [id])
  user             User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers          UserTestAnswer[]
  testQuestions    TestInstanceQuestion[]
  examSession      ExamSession?                @relation(fields: [examSessionId], references: [id])
  topicSnapshots   TestTopicSnapshot[]
  subtopicSnapshots TestSubtopicSnapshot[]

  challengeParticipant ChallengeParticipant?
  scheduledGroupTest   ScheduledGroupTest?   @relation(fields: [scheduledGroupTestId], references: [id])

  @@index([userId, completedAt(sort: Desc)])
  @@index([userId, examId, testType, completedAt(sort: Desc)])
  @@index([userId, examSessionId, completedAt(sort: Desc)])
}

model UserTestAnswer {
  id             String                @id @default(uuid())
  testInstanceId String
  questionId     Int
  userId         String
  userAnswer     String?
  isCorrect      Boolean
  status         AnswerStatus
  timeTakenSec   Int

  testInstance UserTestInstanceSummary @relation(fields: [testInstanceId], references: [id], onDelete: Cascade)
  question     Question                @relation(fields: [questionId], references: [id])
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testInstanceId, questionId])
  @@index([testInstanceId])
  @@index([userId, isCorrect])
}

model StudyRoom {
  id                  String                @id @default(uuid())
  name                String
  description         String?
  createdAt           DateTime              @default(now())
  createdBy           String
  score               Decimal?              @default(0.0) @db.Decimal(10, 2)
  examId              Int?
  lastActivityAt      DateTime?
  privacy             StudyRoomPrivacy      @default(PUBLIC)
  maxMembers          Int?
  memberCount         Int                   @default(1)
  averageRating       Decimal?              @default(0.0) @db.Decimal(2, 1)
  reviewCount         Int                   @default(0)

  members             StudyRoomMember[]
  admins              User[]                @relation("StudyRoomAdmins")
  invitations         StudyRoomInvitation[]
  inviteCodes         StudyRoomInvite[]
  reviews             StudyRoomReview[]
  discussionThreads   DiscussionThread[]
  challenges          Challenge[]
  userBadges          UserBadge[]
  memberStats         UserGroupStats[]
  exams               StudyRoomExam[]
  subjects            StudyRoomSubject[]
  scheduledGroupTests ScheduledGroupTest[]
  creator             User                  @relation("StudyRoomCreator", fields: [createdBy], references: [id])
  exam                Exam?                 @relation(fields: [examId], references: [id])
}

model StudyRoomExam {
  studyRoomId String
  examId      Int

  studyRoom StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
  exam      Exam      @relation(fields: [examId], references: [id])

  @@id([studyRoomId, examId])
}

model StudyRoomSubject {
  studyRoomId String
  subjectId   Int

  studyRoom StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
  subject   Subject   @relation(fields: [subjectId], references: [id])

  @@id([studyRoomId, subjectId])
}

model StudyRoomMember {
  studyRoomId String
  userId      String
  role        StudyRoomRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  reputation  Int           @default(0)

  studyRoom StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([studyRoomId, userId])
}

model UserGroupStats {
  userId      String
  studyRoomId String
  streak      Int @default(0)
  totalPoints Int @default(0)

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyRoom StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)

  @@id([userId, studyRoomId])
}

model StudyRoomInvitation {
  id          String           @id @default(uuid())
  studyRoomId String
  inviterId   String
  inviteeId   String
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  studyRoom StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
  inviter   User      @relation("Inviter", fields: [inviterId], references: [id])
  invitee   User      @relation("Invitee", fields: [inviteeId], references: [id])

  @@unique([studyRoomId, inviteeId])
}

model StudyRoomInvite {
  id          String    @id @default(cuid())
  code        String    @unique
  studyRoomId String
  expiresAt   DateTime?
  usageLimit  Int?
  usageCount  Int       @default(0)
  createdAt   DateTime  @default(now())

  studyRoom StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
}

model StudyRoomReview {
  id          String   @id @default(uuid())
  studyRoomId String
  userId      String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())

  studyRoom StudyRoom @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([studyRoomId, userId])
}

model Challenge {
  id           String          @id @default(uuid())
  studyRoomId  String
  challengerId String
  challengedId String?

  title        String          // Add a title for the challenge
  topicId      Int             // Store the specific topic the challenge is based on
  difficulty   DifficultyLevel // Store the difficulty level
  timeLimit    Int  

  subtopicId   Int?
  winnerId     String?
  createdAt    DateTime        @default(now())
  completedAt  DateTime?

  generatedQuestionIds Int[]

  topic      Topic     @relation(fields: [topicId], references: [id])
  studyRoom            StudyRoom              @relation(fields: [studyRoomId], references: [id])
  challenger           User                   @relation("Challenger", fields: [challengerId], references: [id])
  challenged           User?                   @relation("Challenged", fields: [challengedId], references: [id])
  winner               User?                  @relation("Winner", fields: [winnerId], references: [id])
  Participants     ChallengeParticipant[]
  challengeAnswers ChallengeAnswer[]
}

model ChallengeParticipant {
  challengeId         String
  userId              String
  status              ChallengeStatus @default(PENDING_ACCEPTANCE)
  predictedScore      Int?
  predictedConfidence Int?
  finalScore          Int?
  completedAt         DateTime?
  userTestInstanceId  String? @unique

  score          Int?      // The final calculated score
  timeTakenSec   Float?    // Total time spent
  numCorrect     Int?
  numIncorrect   Int?
  numUnattempted Int?

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  testInstance UserTestInstanceSummary? @relation(fields: [userTestInstanceId], references: [id])

  @@id([challengeId, userId])
}

model ChallengeAnswer {
  id           Int      @id @default(autoincrement())
  
  challengeId  String
  challenge    Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId   Int
  question     Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // --- Data Fields ---
  userAnswer   String?
  timeTakenSec Float
  isCorrect    Boolean

  // Ensures a user can only answer a specific question in a challenge once
  @@unique([challengeId, userId, questionId])
}

model DiscussionThread {
  id            String   @id @default(uuid())
  studyRoomId   String
  authorId      String
  title         String
  content       String
  createdAt     DateTime @default(now())
  questionId    Int?
  pinnedReplyId String?

  studyRoom StudyRoom       @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
  author    User            @relation(fields: [authorId], references: [id])
  question  Question?       @relation(fields: [questionId], references: [id])
  replies   DiscussionReply[]
  likes     DiscussionLike[]

  @@index([studyRoomId, createdAt])
}

model DiscussionReply {
  id        String   @id @default(uuid())
  threadId  String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  parentId  String?

  thread  DiscussionThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author  User              @relation(fields: [authorId], references: [id])
  parent  DiscussionReply?  @relation("NestedReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies DiscussionReply[] @relation("NestedReplies")
  likes   DiscussionLike[]
}

model DiscussionLike {
  // THE FIX: Add a dedicated primary key for the 'like' itself
  id        String   @id @default(uuid())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  replyId   String?
  reply     DiscussionReply? @relation(fields: [replyId], references: [id], onDelete: Cascade)

  threadId  String?
  thread    DiscussionThread? @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@unique([userId, threadId])
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  iconUrl     String?
  userBadges  UserBadge[]
}

model UserBadge {
  userId      String
  badgeId     Int
  studyRoomId String?
  awardedAt   DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge      @relation(fields: [badgeId], references: [id])
  studyRoom StudyRoom? @relation(fields: [studyRoomId], references: [id])

  @@id([userId, badgeId])
}

model ScheduledGroupTestSubject {
  scheduledGroupTestId String
  subjectId            Int

  scheduledGroupTest ScheduledGroupTest @relation(fields: [scheduledGroupTestId], references: [id], onDelete: Cascade)
  subject            Subject            @relation(fields: [subjectId], references: [id])

  @@id([scheduledGroupTestId, subjectId])
}

model ScheduledGroupTest {
  id                     String                      @id @default(uuid())
  studyRoomId            String
  createdById            String
  name                   String
  durationInMinutes      Int
  totalQuestions         Int
  scheduledStartTime     DateTime
  difficultyDistribution Json
  status                 ScheduledTestStatus         @default(SCHEDULED)
  generatedQuestionIds   Json?

  studyRoom     StudyRoom                    @relation(fields: [studyRoomId], references: [id], onDelete: Cascade)
  createdBy     User                         @relation(fields: [createdById], references: [id])
  subjects      ScheduledGroupTestSubject[]
  testInstances UserTestInstanceSummary[]
}

model DailyRecommendation {
  id              String   @id @default(uuid())
  userId          String
  examId          Int
  recommendation  Json // Stores the full JSON output from the AI

  status                  RecommendationStatus @default(PENDING)
  generatedTestInstanceId String?              @unique
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@index([userId, examId, createdAt(sort: Desc)])
  @@index([generatedTestInstanceId])
}

model UserScheduleProfile {
  id                  String           @id @default(uuid())
  userId              String
  examId              Int

  dailyAvailableHours Json // e.g., [3, 3, 3, 3, 3, 5, 5] for Mon-Sun
  coachingStartTime   String           @default("09:00") // Stored as "HH:mm"
  coachingEndTime     String           @default("17:00") // Stored as "HH:mm"

  // User's context and goals
  examDate            DateTime?
  currentLevel        SchedulePersona  @default(NEW)
  studyStyle          StudyStyle       @default(CONCEPT_FIRST)
  subjectConfidence   Json // e.g., {"physics": 2, "chemistry": 3, "mathematics": 1}
  customGoals         String?          // Freeform text for custom goals

  // Test preferences
  preferredMockDay    DayOfWeek        @default(SATURDAY)
  weaknessTestDay     DayOfWeek?       // Optional day for a weakness test

  // Relations and timestamps
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam                Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@unique([userId, examId]) // A user has one schedule profile per exam
}

model ScheduledSession {
  id              String         @id @default(uuid())
  userId          String
  topicId         Int

  date            DateTime       @db.Date
  startTime       String
  durationMinutes Int

  method          StudyMethod
  priority        PriorityLevel
  
  status          SessionStatus  @default(PENDING)

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic           Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())

  @@index([userId, date])
  @@index([topicId])
}

// --- ENUMS ---

enum SchedulePersona {
  NEW
  MID
  STRONG
}

enum StudyStyle {
  TESTS_FIRST
  CONCEPT_FIRST
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum StudyMethod {
  THEORY
  PRACTICE
  REVISION
}

enum PriorityLevel {
  HIGH
  MEDIUM
  LOW
}

enum SessionStatus {
  PENDING
  COMPLETED
  SKIPPED
}

enum ScheduledTestStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum ChallengeStatus {
  PENDING_ACCEPTANCE
  ACCEPTED
  COMPLETED
  EXPIRED
}

enum StudyRoomRole {
  ADMIN
  MEMBER
}

enum StudyRoomPrivacy {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum AnswerStatus {
  Correct
  Incorrect
  Unattempted
}

enum PersonaTag {
  beginner
  striker
  topper
}

enum DifficultyLevel {
  Easy
  Medium
  Hard
  Elite
}

enum TestType {
  mock
  quiz
  drill
  diagnostic
  group
  challenge
  custom
  weakness
  pyq
}

enum RecommendationStatus {
  PENDING
  COMPLETED
  SKIPPED
}